#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Schedule DND infrastructure.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:
- Domain models
- Repositories
- Services
- Exporters

Author: DmitrTRC
"""

import sys
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ path
sys.path.insert(0, str(Path(__file__).parent / "src"))


def test_domain_models():
    """–¢–µ—Å—Ç –¥–æ–º–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""
    print("\n" + "=" * 60)
    print("1Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Domain Models")
    print("=" * 60)

    from schedule_dnd.domain.enums import DutyType, Month
    from schedule_dnd.domain.models import Schedule, ScheduleMetadata, Shift, Unit

    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    metadata = ScheduleMetadata(
        month=Month.OCTOBER, year=2025, created_at=datetime.now()
    )
    print(f"‚úì –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: {metadata.get_period_string()}")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã
    shift1 = Shift(
        date="07.10.2025",
        duty_type=DutyType.UUP,
        time="18:00-22:00",
        notes="–¢–µ—Å—Ç–æ–≤–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ",
    )
    print(f"‚úì –°–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞: {shift1}")
    print(f"  –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {shift1.get_day_of_week()}")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    unit = Unit(id=1, unit_name="–î–ù–î ¬´–í—Å–µ–≤–æ–ª–æ–∂—Å–∫–∏–π –¥–æ–∑–æ—Ä¬ª", shifts=[shift1])
    print(f"‚úì –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {unit}")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –æ–¥–Ω–æ–π —Å–º–µ–Ω—ã
    shift2 = Shift(
        date="15.10.2025", duty_type=DutyType.PDN, time="18:00-22:00", notes="–¢–µ—Å—Ç 2"
    )
    unit.add_shift(shift2)
    print(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤—Ç–æ—Ä–∞—è —Å–º–µ–Ω–∞")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    stats = unit.get_shifts_by_type()
    print(f"  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    schedule = Schedule(metadata=metadata, units=[unit])
    print(f"‚úì –ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω: {schedule}")
    print(f"  –í—Å–µ–≥–æ —Å–º–µ–Ω: {schedule.get_total_shifts()}")
    print(f"  –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {schedule.get_shifts_by_type()}")

    return schedule


def test_repository(schedule):
    """–¢–µ—Å—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    print("\n" + "=" * 60)
    print("2Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Repository")
    print("=" * 60)

    from schedule_dnd.infrastructure.repositories.json_repository import JSONRepository

    repo = JSONRepository()
    print(f"‚úì –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    print(f"  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {repo.base_dir}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    saved_path = repo.save(schedule)
    print(f"‚úì –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {saved_path}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
    exists = repo.exists(saved_path)
    print(f"‚úì –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {exists}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    metadata = repo.get_schedule_metadata(saved_path)
    print(f"‚úì –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:")
    print(f"  –ú–µ—Å—è—Ü: {metadata['month']}")
    print(f"  –ì–æ–¥: {metadata['year']}")
    print(f"  –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π: {metadata['unit_count']}")
    print(f"  –°–º–µ–Ω: {metadata['total_shifts']}")

    # –ó–∞–≥—Ä—É–∑–∫–∞
    loaded_schedule = repo.load(saved_path)
    print(f"‚úì –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω: {loaded_schedule}")

    # –°–ø–∏—Å–æ–∫ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    schedules = repo.list_schedules()
    print(f"‚úì –ù–∞–π–¥–µ–Ω–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {len(schedules)}")

    return saved_path


def test_services(schedule):
    """–¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–æ–≤."""
    print("\n" + "=" * 60)
    print("3Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Services")
    print("=" * 60)

    from schedule_dnd.application.services.export_service import ExportService
    from schedule_dnd.application.services.schedule_service import ScheduleService
    from schedule_dnd.infrastructure.repositories.json_repository import JSONRepository

    repo = JSONRepository()

    # Schedule Service
    schedule_service = ScheduleService(repo)
    print(f"‚úì ScheduleService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –°–ø–∏—Å–æ–∫ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    schedules = schedule_service.list_schedules()
    print(f"‚úì –°–ø–∏—Å–æ–∫ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω: {len(schedules)} —à—Ç.")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if schedules:
        stats = schedule_service.get_schedule_statistics(schedules[0].filename)
        print(f"‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
        print(f"  –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–π: {stats.total_units}")
        print(f"  –í—Å–µ–≥–æ —Å–º–µ–Ω: {stats.total_shifts}")
        print(f"  –ü–æ —Ç–∏–ø–∞–º: {stats.shifts_by_type}")

    # Export Service
    export_service = ExportService(repo)
    print(f"‚úì ExportService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    supported = export_service.get_supported_formats()
    print(f"‚úì –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(supported)}")


def test_exporters(schedule):
    """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–≤."""
    print("\n" + "=" * 60)
    print("4Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Exporters")
    print("=" * 60)

    from schedule_dnd.application.services.export_service import ExportService
    from schedule_dnd.infrastructure.repositories.json_repository import JSONRepository

    repo = JSONRepository()
    export_service = ExportService(repo)

    # –≠–∫—Å–ø–æ—Ä—Ç –≤–æ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã
    results = export_service.export_to_all_formats(schedule)

    print(f"‚úì –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:")
    for result in results:
        status = "‚úì" if result.success else "‚úó"
        size = f"{result.file_size:,} bytes" if result.file_size else "N/A"
        print(f"  {status} {result.format.upper():10} ‚Üí {size}")
        if result.success:
            print(f"     {result.output_path}")
        else:
            print(f"     –û—à–∏–±–∫–∞: {result.error}")


def test_settings():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    print("\n" + "=" * 60)
    print("5Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Settings")
    print("=" * 60)

    from schedule_dnd.infrastructure.config.settings import get_settings

    settings = get_settings()
    print(f"‚úì –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
    print(f"  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {settings.app_name} v{settings.app_version}")
    print(f"  –û–∫—Ä—É–∂–µ–Ω–∏–µ: {settings.environment.value}")
    print(f"  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {settings.data_dir}")
    print(f"  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {settings.output_dir}")
    print(f"  –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {settings.enable_autosave}")
    print(f"  –ë—ç–∫–∞–ø—ã: {settings.enable_backup} (max: {settings.max_backups})")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("\n" + "=" * 60)
    print("üöÄ  Schedule DND - Infrastructure Test")
    print("=" * 60)

    try:
        # 1. –¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π
        schedule = test_domain_models()

        # 2. –¢–µ—Å—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        saved_path = test_repository(schedule)

        # 3. –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
        test_services(schedule)

        # 4. –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–≤
        test_exporters(schedule)

        # 5. –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        test_settings()

        # –ò—Ç–æ–≥–∏
        print("\n" + "=" * 60)
        print("‚úÖ  –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        print("\nüìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print(f"   - data/schedule_2025_10.json")
        print(f"   - output/schedule_2025_10.json")
        print(f"   - output/schedule_2025_10.xlsx")
        print(f"   - output/schedule_2025_10.csv")
        print(f"   - output/schedule_2025_10.md")
        print(f"   - output/schedule_2025_10.html")
        print("\nüí° –û—Ç–∫—Ä–æ–π—Ç–µ HTML —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!")

        return 0

    except Exception as e:
        print("\n" + "=" * 60)
        print("‚ùå  –û–®–ò–ë–ö–ê –ü–†–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò")
        print("=" * 60)
        print(f"\n{type(e).__name__}: {e}")

        import traceback

        traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())
